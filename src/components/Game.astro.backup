---
const { path = "/freecell/index.html" } = Astro.props;
---

<div class="w-full max-w-5xl bg-gray-100 flex items-center justify-center border rounded-lg shadow-md mt-10 mx-auto relative">
  <!-- Fullscreen Toggle Button -->
  <button
    id="fullscreen-btn"
    class="absolute top-4 right-4 z-10 bg-white hover:bg-gray-50 border border-gray-300 rounded-lg p-2 shadow-md transition-all duration-200 hover:shadow-lg"
    aria-label="Toggle fullscreen"
    title="Toggle fullscreen"
  >
    <!-- Expand Icon (SVG) -->
    <svg id="expand-icon" class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
    </svg>
    <!-- Compress Icon (SVG) - Hidden initially -->
    <svg id="compress-icon" class="w-5 h-5 text-gray-700 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9V4.5M9 9H4.5M9 9L3.5 3.5m11 5.5V9m0-4.5H15m4.5 0L15 9M9 15v4.5M9 15H4.5M9 15l-5.5 5.5m11-5.5l5.5 5.5M15 15h4.5m-4.5 0V9"></path>
    </svg>
  </button>

  <object
    id="game-object"
    type="text/html"
    data={path}
    title="FreeCell Game"
    aria-label="Embedded FreeCell game"
    aria-labelledby="freecell-title"
    class="w-full h-[80vh] rounded-lg transition-all duration-300"
  ></object>
</div>

<script>
  class FullscreenManager {
    constructor() {
      this.gameContainer = document.querySelector('.w-full.max-w-5xl.bg-gray-100');
      this.gameObject = document.getElementById('game-object');
      this.fullscreenBtn = document.getElementById('fullscreen-btn');
      this.expandIcon = document.getElementById('expand-icon');
      this.compressIcon = document.getElementById('compress-icon');
      this.isFullscreen = false;

      this.init();
    }

    init() {
      if (this.fullscreenBtn) {
        this.fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
      }

      // Listen for fullscreen change events
      document.addEventListener('fullscreenchange', () => this.handleFullscreenChange());
      document.addEventListener('webkitfullscreenchange', () => this.handleFullscreenChange());
      document.addEventListener('mozfullscreenchange', () => this.handleFullscreenChange());
      document.addEventListener('MSFullscreenChange', () => this.handleFullscreenChange());
    }

    toggleFullscreen() {
      if (!this.isFullscreen) {
        this.enterFullscreen();
      } else {
        this.exitFullscreen();
      }
    }

    enterFullscreen() {
      const container = this.gameContainer;

      if (container.requestFullscreen) {
        container.requestFullscreen();
      } else if (container.webkitRequestFullscreen) {
        container.webkitRequestFullscreen();
      } else if (container.mozRequestFullScreen) {
        container.mozRequestFullScreen();
      } else if (container.msRequestFullscreen) {
        container.msRequestFullscreen();
      }
    }

    exitFullscreen() {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      }
    }

    handleFullscreenChange() {
      this.isFullscreen = !!(
        document.fullscreenElement ||
        document.webkitFullscreenElement ||
        document.mozFullScreenElement ||
        document.msFullscreenElement
      );

      this.updateUI();
      this.updateGameSize();
    }

    updateUI() {
      if (this.isFullscreen) {
        this.expandIcon.classList.add('hidden');
        this.compressIcon.classList.remove('hidden');
        this.fullscreenBtn.setAttribute('title', 'Exit fullscreen');
        this.fullscreenBtn.setAttribute('aria-label', 'Exit fullscreen');
      } else {
        this.expandIcon.classList.remove('hidden');
        this.compressIcon.classList.add('hidden');
        this.fullscreenBtn.setAttribute('title', 'Enter fullscreen');
        this.fullscreenBtn.setAttribute('aria-label', 'Enter fullscreen');
      }
    }

    updateGameSize() {
      if (this.gameObject) {
        if (this.isFullscreen) {
          // In fullscreen, make the game take full height
          this.gameObject.classList.remove('h-[80vh]');
          this.gameObject.classList.add('h-screen');
          this.gameContainer.classList.remove('mt-10', 'rounded-lg');
          this.gameContainer.classList.add('fixed', 'inset-0', 'z-50', 'bg-gray-100');
        } else {
          // Exit fullscreen, restore normal size
          this.gameObject.classList.remove('h-screen');
          this.gameObject.classList.add('h-[80vh]');
          this.gameContainer.classList.add('mt-10', 'rounded-lg');
          this.gameContainer.classList.remove('fixed', 'inset-0', 'z-50', 'bg-gray-100');
        }
      }
    }
  }

  // Initialize fullscreen manager when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new FullscreenManager();
  });
</script>

<style>
  /* Additional styles for fullscreen mode */
  .fixed.inset-0.z-50 {
    border-radius: 0 !important;
    box-shadow: none !important;
  }

  /* Ensure button is always visible and clickable */
  #fullscreen-btn {
    pointer-events: auto;
    cursor: pointer;
  }

  #fullscreen-btn:hover {
    transform: scale(1.05);
  }

  #fullscreen-btn:active {
    transform: scale(0.95);
  }
</style>
